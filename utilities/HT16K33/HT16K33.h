#ifndef HT16K33_H
#define HT16K33_H
/* C/C++ Includes */
#include <string_view>
#include <array>

/* Pico SDK Includes */
#include "pico/stdlib.h"
#include "hardware/i2c.h"

/* Character Defines */
const uint16_t TEST_PATTERN = 0b0111111111111111;

/* ASCII Lookup Table */
const uint16_t font_table[] = {
    0b0000000000000001, 0b0000000000000010, 0b0000000000000100,
    0b0000000000001000, 0b0000000000010000, 0b0000000000100000,
    0b0000000001000000, 0b0000000010000000, 0b0000000100000000,
    0b0000001000000000, 0b0000010000000000, 0b0000100000000000,
    0b0001000000000000, 0b0010000000000000, 0b0100000000000000,
    0b1000000000000000, 0b0000000000000000, 0b0000000000000000,
    0b0000000000000000, 0b0000000000000000, 0b0000000000000000,
    0b0000000000000000, 0b0000000000000000, 0b0000000000000000,
    0b0001001011001001, 0b0001010111000000, 0b0001001011111001,
    0b0000000011100011, 0b0000010100110000, 0b0001001011001000,
    0b0011101000000000, 0b0001011100000000,
    0b0000000000000000, //   32
    0b0000000000000110, // ! 33
    0b0000001000100000, // " 34
    0b0001001011001110, // # 35
    0b0001001011101101, // $ 36
    0b0000110000100100, // % 37
    0b0010001101011101, // & 38
    0b0000010000000000, // ' 39
    0b0010010000000000, // ( 40
    0b0000100100000000, // ) 41
    0b0011111111000000, // * 42
    0b0001001011000000, // + 43
    0b0000100000000000, // , 44
    0b0000000011000000, // - 45
    0b0100000000000000, // . 46
    0b0000110000000000, // / 47
    0b0000110000111111, // 0 48
    0b0000000000000110, // 1 49
    0b0000000011011011, // 2 50
    0b0000000010001111, // 3 51
    0b0000000011100110, // 4 52
    0b0010000001101001, // 5 53
    0b0000000011111101, // 6 54
    0b0000000000000111, // 7 55
    0b0000000011111111, // 8 56
    0b0000000011101111, // 9 57
    0b0001001000000000, // : 58
    0b0000101000000000, // ; 59
    0b0010010000000000, // < 60
    0b0000000011001000, // = 61
    0b0000100100000000, // > 62
    0b0001000010000011, // ? 63
    0b0000001010111011, // @ 64
    0b0000000011110111, // A 65
    0b0001001010001111, // B 66
    0b0000000000111001, // C 67
    0b0001001000001111, // D 68
    0b0000000011111001, // E 69
    0b0000000001110001, // F 70
    0b0000000010111101, // G 71
    0b0000000011110110, // H 72
    0b0001001000001001, // I 73
    0b0000000000011110, // J 74
    0b0010010001110000, // K 75
    0b0000000000111000, // L 76
    0b0000010100110110, // M 77
    0b0010000100110110, // N 78
    0b0000000000111111, // O 79
    0b0000000011110011, // P 80
    0b0010000000111111, // Q 81
    0b0010000011110011, // R 82
    0b0000000011101101, // S 83
    0b0001001000000001, // T 84
    0b0000000000111110, // U 85
    0b0000110000110000, // V 86
    0b0010100000110110, // W 87
    0b0010110100000000, // X 88
    0b0001010100000000, // Y 89
    0b0000110000001001, // Z 90
    0b0000000000111001, // [ 91
    0b0010000100000000, // / 92  
    0b0000000000001111, // ] 93
    0b0000110000000011, // ^ 94
    0b0000000000001000, // _ 95
    0b0000000100000000, // ` 96
    0b0001000001011000, // a 97
    0b0010000001111000, // b 98
    0b0000000011011000, // c 99
    0b0000100010001110, // d 100
    0b0000100001011000, // e 101
    0b0000000001110001, // f 102
    0b0000010010001110, // g 103
    0b0001000001110000, // h 104
    0b0001000000000000, // i 105
    0b0000000000001110, // j 106
    0b0011011000000000, // k 107
    0b0000000000110000, // l 108
    0b0001000011010100, // m 109
    0b0001000001010000, // n 110
    0b0000000011011100, // o 111
    0b0000000101110000, // p 112
    0b0000010010000110, // q 113
    0b0000000001010000, // r 114
    0b0010000010001000, // s 115
    0b0000000001111000, // t 116
    0b0000000000011100, // u 117
    0b0010000000000100, // v 118
    0b0010100000010100, // w 119
    0b0010100011000000, // x 120
    0b0010000000001100, // y 121
    0b0000100001001000, // z 122
    0b0000100101001001, // { 123
    0b0001001000000000, // | 124
    0b0010010010001001, // } 125
    0b0000010100100000, // ~ 126
};

/* Command Defines */
const uint8_t OSCILLATE       = 0b0010;
const uint8_t SET_OUTPUT_STS  = 0b1000;
const uint8_t DIMMING_SET     = 0b1110;
const uint8_t SET_ADDRESS_PTR = 0b0000;
const uint8_t ENABLE          = 0b0001;
const uint8_t DISABLE         = 0b0000;

/* Character Address Locations */
const uint8_t ADDR_1 = 0b0000;
const uint8_t ADDR_2 = 0b0010;
const uint8_t ADDR_3 = 0b0100;
const uint8_t ADDR_4 = 0b0110;

class HT16K33
{
    private:
        i2c_inst_t *i2c_instance;
        uint8_t    i2c_address;
        
        /* Buffer for assembling commands without data */
        uint8_t control_buffer;
        
        /* Buffer for assembling command bytes and LED data bytes
        buffer[0]   - Set Address Pointer command and option data
        buffer[1-8] - 8 bytes of LED data */
        uint8_t data_buffer[9];   

        /* Location for storing LED data returned from character lookup */

        

    public:
        HT16K33();
        HT16K33(i2c_inst_t *i2c_instance,
                uint8_t i2c_address);

        void set_oscillator(bool status);
        void output_enable(bool status);

        void update(void);
        void load_char(char character, uint8_t position);
        void load_character_mask(uint16_t mask, uint8_t position);
        void load_string(char *str);
        void write_character(char character, uint8_t position);
        void write_string(char *str);        
        void set_dimming(uint8_t level);
        void clear_buffer(void);

        uint16_t character_lookup(char character);
};

#endif